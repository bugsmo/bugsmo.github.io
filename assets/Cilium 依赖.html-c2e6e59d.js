import{_ as i,r,o,c as s,b as t,d as e,e as l,a}from"./app-8ca7f52c.js";const d={},u=t("h1",{id:"cilium-依赖",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#cilium-依赖","aria-hidden":"true"},"#"),e(" Cilium 依赖")],-1),c=t("h2",{id:"依赖确认",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#依赖确认","aria-hidden":"true"},"#"),e(" 依赖确认")],-1),h={href:"https://docs.cilium.io/en/stable/operations/system_requirements/",target:"_blank",rel:"noopener noreferrer"},_=a('<p>cilium 和其他的 cni 组件最大的不同在于其底层使用了 ebpf 技术，而该技术对于 Linux 的系统内核版本有较高的要求，完全的要求可以查看官网的详细链接，这里我们着重看内核版本、内核参数这两个部分。</p><h2 id="linux-内核版本选择" tabindex="-1"><a class="header-anchor" href="#linux-内核版本选择" aria-hidden="true">#</a> Linux 内核版本选择</h2><p>默认情况下我们可以参考 cilium 官方给出的一个系统要求总结。因为我们是在 k8s 集群中部署（使用容器），因此只需要关注 Linux 内核版本和 etcd 版本即可。根据经验我们可以知道 1.23.6 版本的 k8s 默认使用的 etcd 版本是 3.5.+，因此重点就来到了 Linux 内核版本这里。</p><table><thead><tr><th style="text-align:left;">Requirement</th><th style="text-align:left;">Minimum Version</th><th style="text-align:right;">In cilium container</th></tr></thead><tbody><tr><td style="text-align:left;">Linux kernel</td><td style="text-align:left;">&gt;= 4.19.57 or &gt;= 4.18 on RHEL8</td><td style="text-align:right;">no</td></tr><tr><td style="text-align:left;">Key-Value store (etcd)</td><td style="text-align:left;">&gt;= 3.1.0</td><td style="text-align:right;">no</td></tr><tr><td style="text-align:left;">clang+LLVM</td><td style="text-align:left;">&gt;= 10.0</td><td style="text-align:right;">yes</td></tr><tr><td style="text-align:left;">iproute2</td><td style="text-align:left;">&gt;= 5.9.0</td><td style="text-align:right;">yes</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>This requirement is only needed if you run cilium-agent natively. If you are using the Cilium container image cilium/cilium, clang+LLVM is included in the container image.</p><p>iproute2 is only needed if you run cilium-agent directly on the host machine. iproute2 is included in the cilium/cilium container image.</p></div><p>毫无疑问 CentOS7 内置的默认内核版本 3.10.x 版本的内核是无法满足需求的，但是在升级内核之前，我们再看看其他的一些要求。</p>',6),p={href:"https://docs.cilium.io/en/stable/operations/system_requirements/#advanced-features",target:"_blank",rel:"noopener noreferrer"},g=t("thead",null,[t("tr",null,[t("th",null,"Cilium Feature"),t("th",null,"Minimum Kernel Version")])],-1),m={href:"https://docs.cilium.io/en/stable/network/kubernetes/bandwidth-manager/#bandwidth-manager",target:"_blank",rel:"noopener noreferrer"},f=t("td",null,">= 5.1",-1),y={href:"https://docs.cilium.io/en/stable/network/egress-gateway/#egress-gateway",target:"_blank",rel:"noopener noreferrer"},x=t("td",null,">= 5.2",-1),b=t("tr",null,[t("td",null,"VXLAN Tunnel Endpoint (VTEP) Integration"),t("td",null,">= 5.2")],-1),k={href:"https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg",target:"_blank",rel:"noopener noreferrer"},L=t("td",null,">= 5.6",-1),w={href:"https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/#session-affinity",target:"_blank",rel:"noopener noreferrer"},v=t("td",null,">= 5.7",-1),V=t("tr",null,[t("td",null,"BPF-based proxy redirection"),t("td",null,">= 5.7")],-1),C=t("tr",null,[t("td",null,"Socket-level LB bypass in pod netns"),t("td",null,">= 5.7")],-1),B=t("tr",null,[t("td",null,"L3 devices"),t("td",null,">= 5.8")],-1),I=t("tr",null,[t("td",null,"BPF-based host routing"),t("td",null,">= 5.10")],-1),E=t("tr",null,[t("td",null,"IPv6 BIG TCP support"),t("td",null,">= 5.19")],-1),P=t("tr",null,[t("td",null,"IPv4 BIG TCP support"),t("td",null,">= 6.3")],-1),T=t("p",null,"可以看到如果需要满足上面所有需求的话，需要内核版本高于 6.3，本着学习测试研究作死的精神，反正都升级了，干脆就升级到新一些的版本吧。这里我们可以直接使用 elrepo 源来升级内核到较新的内核版本。",-1);function M(N,q){const n=r("ExternalLinkIcon");return o(),s("div",null,[u,c,t("p",null,[t("a",h,[e("Cilium 依赖确认"),l(n)])]),_,t("p",null,[e("cilium 官方还给出了一份列表描述了各项"),t("a",p,[e("高级功能"),l(n)]),e("对内核版本的要求：")]),t("table",null,[g,t("tbody",null,[t("tr",null,[t("td",null,[t("a",m,[e("Bandwidth Manager"),l(n)])]),f]),t("tr",null,[t("td",null,[t("a",y,[e("Egress Gateway"),l(n)])]),x]),b,t("tr",null,[t("td",null,[t("a",k,[e("WireGuard Transparent Encryption"),l(n)])]),L]),t("tr",null,[t("td",null,[e("Full support for "),t("a",w,[e("Session Affinity"),l(n)])]),v]),V,C,B,I,E,P])]),T])}const G=i(d,[["render",M],["__file","Cilium 依赖.html.vue"]]);export{G as default};
