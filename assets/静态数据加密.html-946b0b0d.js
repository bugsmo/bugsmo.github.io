import{_ as l,r as o,o as c,c as i,b as a,d as n,e,a as t}from"./app-8ca7f52c.js";const p={},r=a("h1",{id:"静态数据加密",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#静态数据加密","aria-hidden":"true"},"#"),n(" 静态数据加密")],-1),d=a("p",null,"从 1.4.0 版开始，Operator 支持 Percona XtraDB 集群中的完整静态数据加密。",-1),u={class:"hint-container tip"},v=a("p",{class:"hint-container-title"},"注意",-1),k={href:"https://en.wikipedia.org/wiki/Data_at_rest",target:"_blank",rel:"noopener noreferrer"},h=a("code",null,"Percona XtraDB Cluster",-1),m=a("code",null,"keyring_vault",-1),b={href:"https://www.vaultproject.io/",target:"_blank",rel:"noopener noreferrer"},_=a("h2",{id:"安装-vault",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#安装-vault","aria-hidden":"true"},"#"),n(" 安装 Vault")],-1),g={href:"https://helm.sh/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.hashicorp.com/vault/docs/platform/k8s",target:"_blank",rel:"noopener noreferrer"},f=t(`<ol><li>添加 helm repo 并安装：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm repo <span class="token function">add</span> hashicorp https://helm.releases.hashicorp.com

helm <span class="token function">install</span> vault hashicorp/vault
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>安装后，应先初始化 Vault，然后再解封。使用以下命令初始化 Vault：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> pod/vault-0 -- vault operator init -key-shares<span class="token operator">=</span><span class="token number">1</span> -key-threshold<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-format</span><span class="token operator">=</span>json <span class="token operator">&gt;</span> /tmp/vault-init
<span class="token assign-left variable">unsealKey</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq <span class="token parameter variable">-r</span> <span class="token string">&quot;.unseal_keys_b64[]&quot;</span> <span class="token operator">&lt;</span> /tmp/vault-init<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要解封 Vault，请对正在运行的每个 Vault 执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> pod/vault-0 -- vault operator unseal <span class="token string">&quot;<span class="token variable">$unsealKey</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置-vault" tabindex="-1"><a class="header-anchor" href="#配置-vault" aria-hidden="true">#</a> 配置 Vault</h2>`,7),N={href:"https://developer.hashicorp.com/vault/docs/concepts/tokens",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /tmp/vault-init <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">&quot;.root_token&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出将如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>s.VgQvaXl8xGFO1RUxAPbPbsfN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在使用此令牌登录 Vault 并启用<code>pxc-secret</code>密钥路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> vault-0 -- /bin/sh
vault login s.VgQvaXl8xGFO1RUxAPbPbsfN
vault secrets <span class="token builtin class-name">enable</span> <span class="token parameter variable">--version</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-path</span><span class="token operator">=</span>pxc-secret kv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>您还可以启用审核，这不是强制性的，但很有用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vault audit <span class="token builtin class-name">enable</span> <span class="token function">file</span> <span class="token assign-left variable">file_path</span><span class="token operator">=</span>/vault/vault-audit.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><ol start="2"><li>若要在 Kubernetes 中启用保管库密钥，请创建并应用 YAML 文件，如下所述。</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> some<span class="token punctuation">-</span>name<span class="token punctuation">-</span>vault
<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque
<span class="token key atrule">stringData</span><span class="token punctuation">:</span>
  <span class="token key atrule">keyring_vault.conf</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
    token = s.VgQvaXl8xGFO1RUxAPbPbsfN
    vault_url = vault<span class="token punctuation">-</span>service.vault<span class="token punctuation">-</span>service.svc.cluster.local
    secret_mount_point = pxc<span class="token punctuation">-</span>secret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>上述文件中的 <code>name</code> 密钥应等于配置文件<code>deploy/cr.yaml </code>中的 <code>spec.vaultSecretName</code> key。</p></div><p>要启用 TLS 并通过 HTTPS 访问 Vault 服务器，您应该再执行两项操作：</p><ul><li>向密钥添加更多项：包含证书 ca.cert 的文件内容，</li><li>将此文件的路径存储在 vault_ca 密钥中。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> some<span class="token punctuation">-</span>name<span class="token punctuation">-</span>vault
<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque
<span class="token key atrule">stringData</span><span class="token punctuation">:</span>
  <span class="token key atrule">keyring_vault.conf</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
    token = = s.VgQvaXl8xGFO1RUxAPbPbsfN
    vault_url = https<span class="token punctuation">:</span>//vault<span class="token punctuation">-</span>service.vault<span class="token punctuation">-</span>service.svc.cluster.local
    secret_mount_point = pxc<span class="token punctuation">-</span>secret
    vault_ca = /etc/mysql/vault<span class="token punctuation">-</span>keyring<span class="token punctuation">-</span>secret/ca.cert
  <span class="token key atrule">ca.cert</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
    <span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">-</span>BEGIN CERTIFICATE<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">-</span>
    MIIEczCCA1ugAwIBAgIBADANBgkqhkiG9w0BAQQFAD..AkGA1UEBhMCR0Ix
    EzARBgNVBAgTClNvbWUtU3RhdGUxFDASBgNVBAoTC0..0EgTHRkMTcwNQYD
    7vQMfXdGsRrXNGRGnX+vWDZ3/zWI0joDtCkNnqEpVn..HoX
    <span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">-</span>END CERTIFICATE<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>上述文件中的 <code>name</code> 密钥应等于配置文件<code>deploy/cr.yaml </code>中的 <code>spec.vaultSecretName</code> key。</p></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>出于技术原因， <code>vault_ca</code> 密钥应存在于 YAML 文件中，也可能不存在;注释选项 like <code>#vault_ca = ...</code> 是不可接受的。</p></div>`,14),A={href:"https://developer.hashicorp.com/vault/tutorials?track=getting-started-k8s#getting-started-k8s",target:"_blank",rel:"noopener noreferrer"},T=t(`<h2 id="使用加密" tabindex="-1"><a class="header-anchor" href="#使用加密" aria-hidden="true">#</a> 使用加密</h2><p>如果使用 Percona XtraDB Cluster 5.7，则应在创建表或表空间时显式打开加密。这可以通过将 ENCRYPTION=&#39;Y&#39; 该部分添加到 SQL 语句中来完成，如以下示例所示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1 <span class="token punctuation">(</span>c1 <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk<span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span> ENCRYPTION<span class="token operator">=</span><span class="token string">&#39;Y&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLESPACE</span> foo <span class="token keyword">ADD</span> DATAFILE <span class="token string">&#39;foo.ibd&#39;</span> ENCRYPTION<span class="token operator">=</span><span class="token string">&#39;Y&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),V={class:"hint-container tip"},E=a("p",{class:"hint-container-title"},"注意",-1),O={href:"https://www.percona.com/doc/percona-xtradb-cluster/5.7/management/data_at_rest_encryption.html?_gl=1*fmvnd8*_gcl_au*OTg5NTM4MTc5LjE2OTMyMDY2NDQ.",target:"_blank",rel:"noopener noreferrer"},D=a("p",null,"如果使用 Percona XtraDB Cluster 8.0，则默认情况下会打开加密（如果配置了 Vault）。",-1),C={href:"https://docs.percona.com/percona-server/8.0/data-at-rest-encryption.html?_gl=1%2Awnmhrf%2A_gcl_au%2AOTg5NTM4MTc5LjE2OTMyMDY2NDQ.",target:"_blank",rel:"noopener noreferrer"},w=t("<table><thead><tr><th>Option</th><th>Default value</th></tr></thead><tbody><tr><td>early-plugin-load</td><td>keyring_vault.so</td></tr><tr><td>keyring_vault_config</td><td>/etc/mysql/vault-keyring-secret/keyring_vault.conf</td></tr><tr><td>default_table_encryption</td><td>ON</td></tr><tr><td>table_encryption_privilege_check</td><td>ON</td></tr><tr><td>innodb_undo_log_encrypt</td><td>ON</td></tr><tr><td>innodb_redo_log_encrypt</td><td>ON</td></tr><tr><td>binlog_encryption</td><td>ON</td></tr><tr><td>binlog_rotate_encryption_master_key_at_startup</td><td>ON</td></tr><tr><td>innodb_temp_tablespace_encrypt</td><td>ON</td></tr><tr><td>innodb_parallel_dblwr_encrypt</td><td>ON</td></tr><tr><td>innodb_encrypt_online_alter_logs</td><td>ON</td></tr><tr><td>encrypt_tmp_files</td><td>ON</td></tr></tbody></table>",1);function B(P,I){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,d,a("div",u,[v,a("p",null,[a("a",k,[n("Data_at_rest"),e(s)]),n("是指以文件、数据库记录等形式存储的非活动数据。")])]),a("p",null,[n("为了实现这些功能，Operator 使用 "),h,n(" 附带的 "),m,n(" 插件，并利用 "),a("a",b,[n("HashiCorp Vault"),e(s)]),n(" 存储作为加密密钥。")]),_,a("p",null,[n("以下步骤将使用 "),a("a",g,[n("Helm 3 包管理器"),e(s)]),n("在 Kubernetes 上部署 Vault。其他 Vault 安装方法也应该有效，因此此处放置的说明不是强制性的，仅用于说明目的。有关安装的更多信息，请参阅 "),a("a",y,[n("Vault"),e(s)]),n(" 的文档。")]),f,a("p",null,[n("首先，您应该在 Vault 中启用密钥。为此，您需要一个 "),a("a",N,[n("Vault 令牌"),e(s)]),n("。Percona XtraDB Cluster 可以使用任何常规令牌，允许在密钥挂载点内进行所有操作。在以下示例中，我们使用根令牌来确保满足权限要求，但实际上不需要根权限。我们不建议在生产系统上使用根令牌。")]),x,a("p",null,[n("有关如何安装和配置 Vault 的更多详细信息，请参阅"),a("a",A,[n("官方文档"),e(s)]),n("。")]),T,a("div",V,[E,a("p",null,[n("在"),a("a",O,[n("此处"),e(s)]),n("查看有关 Percona XtraDB Cluster 5.7 中加密的更多详细信息。")])]),D,a("p",null,[n("下表显示了相应的 "),a("a",C,[n("my.cnf 配置选项"),e(s)]),n("的默认值：")]),w])}const q=l(p,[["render",B],["__file","静态数据加密.html.vue"]]);export{q as default};
