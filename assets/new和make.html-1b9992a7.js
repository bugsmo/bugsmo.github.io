import{_ as n,o as a,c as s,a as e}from"./app-8ca7f52c.js";const c={},t=e(`<h1 id="new-和-make" tabindex="-1"><a class="header-anchor" href="#new-和-make" aria-hidden="true">#</a> new 和 make</h1><h2 id="new-和-make-的异同" tabindex="-1"><a class="header-anchor" href="#new-和-make-的异同" aria-hidden="true">#</a> new 和 make 的异同</h2><ul><li>new 和 make 都是用来分配内存的。</li><li>new 用于值类型和用户自定义的类型，如自定义的 struct、int、float 等。</li><li>make 用于内建的引用类型，如 channel、map、slice 等。</li><li>new 返回指针，make 返回引用类型本身。</li><li>new 分配的空间被清零，make 分配空间后，会进行初始化，初始化的结果和类型有关。</li><li>new 分配的空间大小总是确定的，make 分配的空间大小则不确定，取决于具体的类型。</li><li>new 和 make 都是在堆上分配内存，但是 new 分配的内存空间是连续的，make 分配的内存空间是不连续的。</li></ul><h2 id="new-的使用" tabindex="-1"><a class="header-anchor" href="#new-的使用" aria-hidden="true">#</a> new 的使用</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// new(T)分配了零值填充的T类型的内存空间，并返回其地址，即一个*T类型的值。</span>
<span class="token comment">// 用Go的术语说，它返回了一个指向新分配类型T的指针，该指针指向的值为T类型的零值。</span>
<span class="token comment">// 也就是说，new(T)为T类型的新值分配了一片内存空间，并返回指向这片内存空间的指针。</span>

<span class="token comment">// new(T)的语法和T{}是等价的，但是new(T)会分配更多的内存空间，因为它还会为T类型的字段分配内存空间，并将其初始化为零值。</span>
<span class="token comment">// 也就是说，new(T)为T类型的每个导出字段分配了内存空间，并将其初始化为零值。</span>
<span class="token comment">// 但是T{}只会为T类型的每个导出字段分配内存空间，但不会初始化。</span>

<span class="token comment">// new(T)的返回值是*T类型的，即指向T类型的指针。</span>
<span class="token comment">// 但是T{}的返回值是T类型的，即T类型的值。</span>

a <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// a是一个指针，指向一个int类型的值，该值为0</span>
b <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token comment">// b是一个指针，指向一个bool类型的值，该值为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="make-的使用" tabindex="-1"><a class="header-anchor" href="#make-的使用" aria-hidden="true">#</a> make 的使用</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// make(T, args)返回一个类型为T的初始值，它只适用于3种内建的引用类型：切片、map和channel。</span>
<span class="token comment">// make(T, args)和new(T)的语法上的区别在于，它们各自的返回值的类型不同。</span>
<span class="token comment">// make(T, args)返回的是T类型，而new(T)返回的是*T类型。</span>

<span class="token comment">// make(T, args)的返回值是T类型的，即T类型的值。</span>

a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// a是一个切片，长度为5，容量为5，切片中的元素为0</span>
a1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// a1是一个切片，长度为5，容量为10，切片中的元素为0</span>
b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// b是一个map，长度为0，map中的元素为0</span>
c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// c是一个channel，长度为0，channel中的元素为0</span>
c1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// c1是一个channel，长度为5，channel中的元素为0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><code>new</code>用来初始化基本数据类型和自定义类型，返回值为该类型的指针类型，值为该类型 0 值</li><li><code>make</code>用来初始化<code>slice</code> <code>map</code> <code>chan</code>类型，返回该类型的引用</li></ul>`,9),i=[t];function l(p,o){return a(),s("div",null,i)}const d=n(c,[["render",l],["__file","new和make.html.vue"]]);export{d as default};
