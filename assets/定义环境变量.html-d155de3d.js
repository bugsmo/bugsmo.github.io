import{_ as l,r as t,o as c,c as i,b as a,d as n,e as p,a as e}from"./app-8ca7f52c.js";const o={},d=e(`<h1 id="定义环境变量" tabindex="-1"><a class="header-anchor" href="#定义环境变量" aria-hidden="true">#</a> 定义环境变量</h1><p>有时，您需要定义新的环境变量，以便为集群的组件提供额外的配置。例如，您可以使用它来自定义 HAProxy 的配置，或为 PMM 客户端添加其他选项。</p><p>Operator 可以将环境变量存储在 Kubernetes Secret 中。下面是一个示例，其中包含与 HAProxy 相关的几个选项：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>env<span class="token punctuation">-</span>var<span class="token punctuation">-</span>secrets
<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">HA_CONNECTION_TIMEOUT</span><span class="token punctuation">:</span> MTAwMA==
  <span class="token key atrule">OK_IF_DONOR</span><span class="token punctuation">:</span> MQ==
  <span class="token key atrule">HA_SERVER_OPTIONS</span><span class="token punctuation">:</span> Y2hlY2sgaW50ZXIgMzAwMDAgcmlzZSAxIGZhbGwgNSB3ZWlnaHQgMQ==
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),r={class:"hint-container tip"},u=a("p",{class:"hint-container-title"},"注意",-1),v=a("p",null,"此示例中使用的变量具有以下效果：",-1),m=a("li",null,[a("code",null,"HA_CONNECTION_TIMEOUT"),n(" 允许为 HAProxy 完成的运行状况检查设置自定义超时（它在 XtraDB 集群实例上重复执行简单的状态查询）。默认的 10 秒超时适用于大多数工作负载，但在 Kubernetes 节点上发生不稳定的 Kubernetes 网络或软锁定的情况下，增加超时应该会有所帮助。")],-1),k=a("li",null,[a("code",null,"OK_IF_DONOR"),n(" 允许应用程序连接到 XtraDB 集群捐赠者。备份在捐赠者节点上运行，与备份结合使用的 SQL 查询可能会比平时运行得慢。启用该选项以在只有一个 XtraDB 集群节点处于活动状态，并且第二个 XtraDB 集群节点通过 SST 加入集群时授予应用程序访问权限。")],-1),b=a("code",null,"HA_SERVER_OPTIONS",-1),y=a("code",null,"check inter 30000 rise 1 fall 5 weight 1",-1),h={href:"https://docs.haproxy.org/2.6/configuration.html#5.2",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>如您所见，环境变量存储为 data - 即 base64 编码的字符串，因此您需要对每个变量的值进行编码。例如，要使 HA_CONNECTION_TIMEOUT 变量等于 1000 ，您可以在本地 shell 中运行 <code>echo -n &quot;1000&quot; | base64 --wrap=0</code> （或者仅在 Apple macOS 的情况下 <code>echo -n &quot;1000&quot; | base64</code> ）并获取 MTAwMA== 。</p><div class="hint-container tip"><p class="hint-container-title">注意</p><p>同样，您可以从 Base64 编码的字符串中读取选项列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;MTAwMA==&quot;</span> <span class="token operator">|</span> base64 <span class="token parameter variable">--decode</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><p>准备就绪后，使用以下命令应用 YAML 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create <span class="token parameter variable">-f</span> deploy/my-env-secret.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将此密钥的名称放在 <code>deploy/cr.yaml</code> 配置文件的<code>pxc</code>， <code>proxysql</code> 或 <code>haproxy</code> 部分中的 <code>envVarsSecret</code>key：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">haproxy</span><span class="token punctuation">:</span>
  <span class="token punctuation">...</span>.
  <span class="token key atrule">envVarsSecret</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>env<span class="token punctuation">-</span>var<span class="token punctuation">-</span>secrets
  <span class="token punctuation">...</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在使用以下命令应用 <code>deploy/cr.yaml</code> 该文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> deploy/cr.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一个示例演示了如何将带有备用内存分配器库名称的环境变量 <code>LD_PRELOAD</code> 传递给 mysqld。如果怀疑内存使用率高于预期，通常建议尝试使用 mysqld 的替代分配器库，并且您可以通过以下环境变量 使用 Percona XtraDB 集群 Pod 中已存在的 jemalloc 分配器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">LD_PRELOAD</span><span class="token operator">=</span>/usr/lib64/libjemalloc.so.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个新的 YAML 文件，其内容与上一个示例类似，但带有 <code>LD_PRELOAD</code> 变量，存储为 base64 编码的字符串：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>new<span class="token punctuation">-</span>env<span class="token punctuation">-</span>var<span class="token punctuation">-</span>secrets
<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">LD_PRELOAD</span><span class="token punctuation">:</span> L3Vzci9saWI2NC9saWJqZW1hbGxvYy5zby4x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果此 YAML 文件已命名 <code>deploy/my-new-env-var-secret</code> ，则应用该文件的命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create <span class="token parameter variable">-f</span> deploy/my-new-env-secret.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，将这个新 Secret 的名称放入 <code>deploy/cr.yaml</code> 配置文件 <code>pxc</code> 部分的 <code>envVarsSecret</code> 密钥中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pxc</span><span class="token punctuation">:</span>
  <span class="token punctuation">...</span>.
  <span class="token key atrule">envVarsSecret</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>new<span class="token punctuation">-</span>env<span class="token punctuation">-</span>var<span class="token punctuation">-</span>secrets
  <span class="token punctuation">...</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像往常一样，不要忘记应用 <code>deploy/cr.yaml</code> 该文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> deploy/cr.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18);function g(x,O){const s=t("ExternalLinkIcon");return c(),i("div",null,[d,a("div",r,[u,v,a("ul",null,[m,k,a("li",null,[b,n(" 允许在 HAProxy 配置文件中设置服务器的自定义选项。您可以从默认 "),y,n(" 集开始，并添加"),a("a",h,[n("上游文档"),p(s)]),n("中引用的必需选项。")])])]),_])}const N=l(o,[["render",g],["__file","定义环境变量.html.vue"]]);export{N as default};
