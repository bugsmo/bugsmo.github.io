import{_ as d,r as o,o as p,c as u,b as e,d as a,e as n,w as t,a as c}from"./app-8ca7f52c.js";const m={},v=e("h1",{id:"更改-mysql-选项",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#更改-mysql-选项","aria-hidden":"true"},"#"),a(" 更改 MySQL 选项")],-1),b={href:"https://dev.mysql.com/doc/refman/8.0/en/option-files.html",target:"_blank",rel:"noopener noreferrer"},h=c('<ul><li>编辑 <code>deploy/cr.yaml</code> 文件，</li><li>使用 ConfigMap，</li><li>使用 Secret 对象。</li></ul><p>通常不需要添加自定义选项，因为 Operator 负责为 MySQL 提供合理的默认值。此外，某些 MySQL 选项无法更改：您不应将选项更改为 <code>require_secure_transport ON</code> ，因为这会破坏 Operator 的行为。</p><div class="hint-container tip"><p class="hint-container-title">注意</p><p>如果您仍然需要同等的东西 <code>require_secure_transport=ON</code> 来强制客户端和服务器之间的加密连接，最方便的解决方法是创建带有选项的 <code>REQUIRE SSL</code> MySQL 用户。</p></div><p>如果您一次使用多种不同的方式向操作员提供自定义配置，则它只会选择一种。首先，它查找 Secret 对象。如果未找到匹配的 Secret，它将查找在自定义资源（通过 <code>deploy/cr.yaml</code> 文件提供的配置）中指定的自定义配置。如果也没有找到，则 Operator 会搜索 ConfigMap。</p><h2 id="编辑-deploy-cr-yaml-文件" tabindex="-1"><a class="header-anchor" href="#编辑-deploy-cr-yaml-文件" aria-hidden="true">#</a> 编辑 <code>deploy/cr.yaml</code> 文件</h2>',5),g={href:"https://dev.mysql.com/doc/refman/8.0/en/option-files.html",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"deploy/cr.yaml",-1),_=c(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">secretsName</span><span class="token punctuation">:</span> cluster1<span class="token punctuation">-</span>secrets
  <span class="token key atrule">pxc</span><span class="token punctuation">:</span>
    <span class="token punctuation">...</span>
      <span class="token key atrule">configuration</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        [mysqld]
        wsrep_debug=CLIENT
        [sst]
        wsrep_debug=CLIENT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k={href:"https://docs.percona.com/percona-operator-for-mysql/pxc/operator.html#operator-pxc-section",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"使用-configmap",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-configmap","aria-hidden":"true"},"#"),a(" 使用 ConfigMap")],-1),x=e("p",null,"您可以使用 configmap 和集群重启来重置配置选项。configmap 允许 Kubernetes 在容器化应用程序内传递或更新配置数据。",-1),S=e("code",null,"kubectl",-1),L={href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#create-a-configmap",target:"_blank",rel:"noopener noreferrer"},q=c(`<p>例如，假设您的应用程序需要更多连接。要增加 MySQL <code>max_connections</code> 中的设置，请使用以下设置定义配置文件 <code>my.cnf</code> ：</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>[mysqld]
...
max_connections=250
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用以下 <code>kubectl create configmap</code> 命令从 <code>my.cnf</code> 文件创建 configmap。</p><p>您应该使用集群名称与 -pxc 后缀的组合作为 configmap 的命名约定。若要查找群集名称，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pxc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>kubectl create configmap</code> 命令的语法为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create configmap <span class="token operator">&lt;</span>cluster-name<span class="token operator">&gt;</span>-pxc <span class="token operator">&lt;</span>resource-type<span class="token operator">=</span>resource-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下示例定义为 configmap 名称，将 <code>my.cnf</code> 文件定义为 <code>cluster1-pxc</code> 数据源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create configmap cluster1-pxc --from-file<span class="token operator">=</span>my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要查看创建的 configmap，请使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl describe configmaps cluster1-pxc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用-secret-对象" tabindex="-1"><a class="header-anchor" href="#使用-secret-对象" aria-hidden="true">#</a> 使用 Secret 对象</h2>`,12),C={href:"https://kubernetes.io/docs/concepts/configuration/secret/",target:"_blank",rel:"noopener noreferrer"},B=e("p",null,"您应该创建一个具有特定名称的 Secret 对象，该对象由集群名称和 pxc 后缀组成。",-1),M=e("p",null,[a("配置选项应放在 "),e("code",null,"data"),a(" 该部分的特定键内。此密钥的名称 "),e("code",null,"my.cnf"),a(" 用于 Percona XtraDB Cluster Pod。")],-1),N={href:"https://en.wikipedia.org/wiki/Base64",target:"_blank",rel:"noopener noreferrer"},P=c(`<p>例如，让我们定义一个 <code>my.cnf</code> 配置文件，并放置一对我们在上一个示例中使用的 MySQL 选项：</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>[mysqld]
wsrep_debug=CLIENT
[sst]
wsrep_debug=CLIENT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过命令行从选项中获取 Base64 编码的字符串，如下所示：</p>`,3),Q=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"cat"),a(" my.cnf "),e("span",{class:"token operator"},"|"),a(" base64 "),e("span",{class:"token parameter variable"},"--wrap"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"0"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),X=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"cat"),a(" my.cnf "),e("span",{class:"token operator"},"|"),a(` base64
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),K=c(`<div class="hint-container tip"><p class="hint-container-title">注意</p><p>同样，您可以从 Base64 编码的字符串中读取选项列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;W215c3FsZF0Kd3NyZXBfZGVidWc9T04KW3NzdF0Kd3NyZXBfZGVidWc9T04K&quot;</span> <span class="token operator">|</span> base64 <span class="token parameter variable">--decode</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><p>最后，使用 yaml 文件创建 Secret 对象。例如，您可以创建<code>deploy/my-pxc-secret.yaml</code>，包含以下内容的文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> cluster1<span class="token punctuation">-</span>pxc
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">my.cnf</span><span class="token punctuation">:</span> <span class="token string">&quot;W215c3FsZF0Kd3NyZXBfZGVidWc9T04KW3NzdF0Kd3NyZXBfZGVidWc9T04K&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备就绪后，使用以下命令应用它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create <span class="token parameter variable">-f</span> deploy/my-pxc-secret.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>不要忘记重新启动 Percona XtraDB Cluster，以确保集群已更新配置。</p></div><h2 id="使更改的选项对-percona-xtradb-cluster-可见" tabindex="-1"><a class="header-anchor" href="#使更改的选项对-percona-xtradb-cluster-可见" aria-hidden="true">#</a> 使更改的选项对 Percona XtraDB Cluster 可见</h2>`,7),T={href:"https://docs.percona.com/percona-operator-for-mysql/pxc/kubernetes.html",target:"_blank",rel:"noopener noreferrer"},O=c(`<h2 id="自动调优-mysql-选项" tabindex="-1"><a class="header-anchor" href="#自动调优-mysql-选项" aria-hidden="true">#</a> 自动调优 MySQL 选项</h2><p>如果用户没有指定这些选项的常量值（在 CR.yaml 或 ConfigMap 中），则 Operator 可以根据可用的 Pod 资源限制（内存和 CPU）自动计算和设置这些选项的少数配置选项。</p><p>可以自动设置的选项如下：</p><ul><li>innodb_buffer_pool_size</li><li>max_connections</li></ul><p>如果定义了 Percona XtraDB 集群 Pod limits，则使用 limits 值来计算这些选项。如果未定义 Percona XtraDB Cluster Pod limits，则不会执行自动调整。</p><p>此外，从 Operator 1.12.0 开始，还有另一种自动调优方式。您可以<code>&quot;{{ containerMemoryLimit }}&quot;</code> 按如下方式用作 <code>spec.pxc.configuration</code> 值：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pxc</span><span class="token punctuation">:</span>
    <span class="token key atrule">configuration</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    [mysqld]
    innodb_buffer_pool_size={{containerMemoryLimit * 3 / 4}}
    ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function Z(w,E){const s=o("ExternalLinkIcon"),r=o("Tabs");return p(),u("div",null,[v,e("p",null,[a("您可能需要对应用程序进行配置更改。MySQL 允许选择使用配置文件配置数据库。您可以通过以下方式之一传递 "),e("a",b,[a("my.cnf"),n(s)]),a(" 配置文件中的选项以包含在 MySQL 配置中：")]),h,e("p",null,[a("您可以通过编辑 的配置部分来添加 "),e("a",g,[a("my.cnf"),n(s)]),a(" 配置文件中的选项 "),f,a(" 。下面是一个示例：")]),_,e("p",null,[a("有关详细信息，请参阅 "),e("a",k,[a("自定义资源选项，PXC 选项"),n(s)]),a("。")]),y,x,e("p",null,[a("使用命令 "),S,a(" 从外部资源创建 configmap，有关更多信息，请参阅"),e("a",L,[a("配置 Pod 以使用 ConfigMap"),n(s)]),a("。")]),q,e("p",null,[a("Operator 还可以将配置选项存储在 "),e("a",C,[a("Kubernetes Secret"),n(s)]),a(" 中。如果需要对某些敏感数据进行额外保护，这可能很有用。")]),B,M,e("p",null,[a("实际选项应使用 "),e("a",N,[a("Base64"),n(s)]),a(" 进行编码。")]),P,n(r,{id:"98",data:[{id:"在 Linux 中"},{id:"在 macOS 中"}]},{title0:t(({value:i,isActive:l})=>[a("在 Linux 中")]),title1:t(({value:i,isActive:l})=>[a("在 macOS 中")]),tab0:t(({value:i,isActive:l})=>[Q]),tab1:t(({value:i,isActive:l})=>[X]),_:1}),K,e("p",null,[a("不要忘记重新启动 Percona XtraDB Cluster，以确保集群已更新配置（请参阅有关如何连接 "),e("a",T,[a("Install Percona XtraDB Cluster on Kubernetes page"),n(s)]),a("的详细信息）。")]),O])}const I=d(m,[["render",Z],["__file","更改MySQL选项.html.vue"]]);export{I as default};
