import{_ as t,r as o,o as l,c as i,b as a,d as n,e as s,a as c}from"./app-8ca7f52c.js";const r={},p=a("h1",{id:"labels-和-annotations",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#labels-和-annotations","aria-hidden":"true"},"#"),n(" Labels 和 annotations")],-1),d={href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/",target:"_blank",rel:"noopener noreferrer"},m=c(`<p>标签和注释非常相似。它们之间的区别在于，Kubernetes 使用标签来识别和选择对象，而注解则为资源分配额外的非标识信息。因此，注解的典型作用是促进与某些外部工具的集成。</p><h2 id="在自定义资源中设置-labels-和-annotations" tabindex="-1"><a class="header-anchor" href="#在自定义资源中设置-labels-和-annotations" aria-hidden="true">#</a> 在自定义资源中设置 labels 和 annotations</h2><p>您可以在自定义资源元数据部分中将标签和/或注释设置为键/值字符串对， <code>deploy/cr.yaml</code> 如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> pxc.percona.com/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> PerconaXtraDBCluster
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> cluster1
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">percona.com/issue-vault-token</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">xx</span><span class="token punctuation">:</span> <span class="token string">&quot;xx&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查哪些标签附加到特定对象的最简单方法是使用 <code>kubectl get</code> 命令的附加 <code>--show-labels</code> 选项。</p><p>检查注解并不困难：可以按照以下示例所示完成：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pod cluster1-pxc-0 <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{.metadata.annotations}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="指定-operator-忽略的-labels-和-annotations" tabindex="-1"><a class="header-anchor" href="#指定-operator-忽略的-labels-和-annotations" aria-hidden="true">#</a> 指定 Operator 忽略的 labels 和 annotations</h2><p>有时，各种 Kubernetes 组件可以向 Operator 管理的对象添加自己的注解。</p><p>操作员跟踪对其对象的所有更改，并可以删除在没有其参与的情况下出现的注释。</p><p>如果自定义资源中没有注释或标签，则在将新标签或注释添加到对象时，Operator 不会执行任何操作。</p><p>如果在自定义资源中指定了注释或标签，则 Operator 将开始管理注释和标签。在这种情况下，它会删除未知的注释和标签。</p><p>尽管如此，还是可以通过在<code>deploy/cr.yaml</code> 中的键 <code>spec.ignoreAnnotations</code> 或 <code>spec.ignoreLabels</code> 来指定 Operator 应忽略哪些注释和标签，如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ignoreAnnotations</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> some.custom.cloud.annotation/smth
  <span class="token key atrule">ignoreLabels</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> some.custom.cloud.label/smth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Operator 将忽略任何 Service 注解或标签，其键以上述示例开头。例如，应用上述 cr.yaml 片段后，将忽略以下注释和标签：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">annotations</span><span class="token punctuation">:</span>
  <span class="token key atrule">some.custom.cloud.annotation/smth</span><span class="token punctuation">:</span> somethinghere
<span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token key atrule">some.custom.cloud.label/smth</span><span class="token punctuation">:</span> somethinghere
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function k(b,v){const e=o("ExternalLinkIcon");return l(),i("div",null,[p,a("p",null,[a("a",d,[n("Labels"),s(e)]),n("和"),a("a",u,[n("annotations"),s(e)]),n("用于将其他元数据信息附加到 Kubernetes 资源。")]),m])}const g=t(r,[["render",k],["__file","Labels和annotations.html.vue"]]);export{g as default};
