import{_ as n,r as l,o as i,c as t,b as a,d as s,e as r,a as c}from"./app-8ca7f52c.js";const o={},p=c(`<h1 id="zalando-的-es-operator-的快速入门" tabindex="-1"><a class="header-anchor" href="#zalando-的-es-operator-的快速入门" aria-hidden="true">#</a> zalando 的 es-operator 的快速入门</h1><p>这是一个用于在 Kubernetes 中运行 Elasticsearch 的操作符，重点关注操作方面，例如安全排空和为 Elasticsearch 数据节点提供自动缩放功能，而不仅仅是抽象清单定义。</p><h2 id="拉取代码库" tabindex="-1"><a class="header-anchor" href="#拉取代码库" aria-hidden="true">#</a> 拉取代码库</h2><p>开始之前要完成一些准备工作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/zalando-incubator/es-operator.git

<span class="token function">cp</span> <span class="token parameter variable">-r</span> es-operator/docs/ <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="步骤-1-设置角色" tabindex="-1"><a class="header-anchor" href="#步骤-1-设置角色" aria-hidden="true">#</a> 步骤 1 - 设置角色</h2><p>ES Operator 需要特殊权限才能访问 Kubernetes API，而 Elasticsearch 需要特权访问权限来增加内存映射文件的操作系统限制。</p><p>因此，作为第一步，我们部署了一个附加了必要 RBAC 角色的服务帐户 operator 。</p><ul><li>可选修改部署清单的 namespace 为：infra</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> docs/cluster-roles.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="步骤-2-注册自定义资源定义" tabindex="-1"><a class="header-anchor" href="#步骤-2-注册自定义资源定义" aria-hidden="true">#</a> 步骤 2 - 注册自定义资源定义</h2><p>ES 操作员管理两个自定义资源。这些需要在集群中注册。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> docs/zalando.org_elasticsearchdatasets.yaml
kubectl apply <span class="token parameter variable">-f</span> docs/zalando.org_elasticsearchmetricsets.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="步骤-3-部署-es-运算符" tabindex="-1"><a class="header-anchor" href="#步骤-3-部署-es-运算符" aria-hidden="true">#</a> 步骤 3 - 部署 ES 运算符</h2><p>接下来，我们将部署我们的运算符。它将从命名空间中的部署清单创建 es-operator-demo ，并拉取最新的映像。</p><ul><li>可选修改部署清单的 namespace 为：infra</li><li>可选修改部署清单的镜像地址为：pixiuio/es-operator:v0.1.4</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> docs/es-operator.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以检查它是否已成功启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> infra get pods
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="步骤-4-引导您的-elasticsearch-集群" tabindex="-1"><a class="header-anchor" href="#步骤-4-引导您的-elasticsearch-集群" aria-hidden="true">#</a> 步骤 4 - 引导您的 Elasticsearch 集群</h2><p>Elasticsearch 将从一组主节点引导。出于此演示的目的，单个母版就足够了。对于生产，建议使用一组三个母版。</p><ul><li>可选修改部署清单的 namespace 为：infra</li><li>可选修改部署清单的镜像地址：pixiuio/elasticsearch-oss:7.10.2</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> docs/elasticsearch-cluster.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清单还为传输和 HTTP 协议创建服务。如果通过隧道连接到主服务器上的端口 9200，您应该能够与 Elasticsearch 集群通信。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">MASTER_POD</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl <span class="token parameter variable">-n</span> infra get pods <span class="token parameter variable">-l</span> <span class="token assign-left variable">application</span><span class="token operator">=</span>elasticsearch,role<span class="token operator">=</span>master <span class="token parameter variable">-o</span> custom-columns<span class="token operator">=</span>:metadata.name --no-headers <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">1</span><span class="token variable">)</span></span>
kubectl <span class="token parameter variable">-n</span> infra port-forward <span class="token variable">$MASTER_POD</span> <span class="token number">9200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>新建终端，执行以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://127.0.0.1:9200

<span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;es-master-0&quot;</span>,
  <span class="token string">&quot;cluster_name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;es-cluster&quot;</span>,
  <span class="token string">&quot;cluster_uuid&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;OeBtrse_SceonjeeG0jdvQ&quot;</span>,
  <span class="token string">&quot;version&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;number&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;7.10.2&quot;</span>,
    <span class="token string">&quot;build_flavor&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;oss&quot;</span>,
    <span class="token string">&quot;build_type&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;docker&quot;</span>,
    <span class="token string">&quot;build_hash&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;747e1cc71def077253878a59143c1f785afa92b9&quot;</span>,
    <span class="token string">&quot;build_date&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;2021-01-13T00:42:12.435326Z&quot;</span>,
    <span class="token string">&quot;build_snapshot&quot;</span> <span class="token builtin class-name">:</span> false,
    <span class="token string">&quot;lucene_version&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;8.7.0&quot;</span>,
    <span class="token string">&quot;minimum_wire_compatibility_version&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;6.8.0&quot;</span>,
    <span class="token string">&quot;minimum_index_compatibility_version&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;6.0.0-beta1&quot;</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;tagline&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;You Know, for Search&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="步骤-5-添加-elasticsearch-数据集" tabindex="-1"><a class="header-anchor" href="#步骤-5-添加-elasticsearch-数据集" aria-hidden="true">#</a> 步骤 5 - 添加 Elasticsearch 数据集</h2><p>最后，让我们添加数据节点。出于本演示的目的，我们有一个简单的堆栈将启动一个数据节点，并关闭了自动缩放功能。</p><ul><li>可选修改部署清单的 namespace 为：infra</li><li>可选修改部署清单的镜像地址：pixiuio/elasticsearch-oss:7.0.0</li><li>可选修改部署清单的资源限制，增大 jvm 内存，pod 内存和 cpu。</li><li>可选修改部署清单的 pvc 容量。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> docs/elasticsearchdataset-simple.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若要检查结果，请首先查找自定义资源。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> infra get eds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ES 运算符创建一个 StatefulSet，它将生成 Pod。这可能需要几分钟时间，具体取决于您的网络和群集性能。（静待 pod running）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> infra get sts
kubectl <span class="token parameter variable">-n</span> infra get pods
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="步骤-6-索引创建" tabindex="-1"><a class="header-anchor" href="#步骤-6-索引创建" aria-hidden="true">#</a> 步骤 6：索引创建</h2><p>通过隧道连接到主服务器上的端口 9200，您应该能够与 Elasticsearch 集群通信。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">MASTER_POD</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl <span class="token parameter variable">-n</span> infra get pods <span class="token parameter variable">-l</span> <span class="token assign-left variable">application</span><span class="token operator">=</span>elasticsearch,role<span class="token operator">=</span>master <span class="token parameter variable">-o</span> custom-columns<span class="token operator">=</span>:metadata.name --no-headers <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">1</span><span class="token variable">)</span></span>
kubectl <span class="token parameter variable">-n</span> infra port-forward <span class="token variable">$MASTER_POD</span> <span class="token number">9200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用名为 group 的 Elasticsearch 节点标签来区分堆栈。建议使用此标签将具有相同扩展要求的索引绑定到具有相同 group 标签的节点，方法是使用如下分片分配设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XPUT</span> localhost:9200/demo-index -HContent-type:application/json <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;settings&quot;: {&quot;index&quot;: { &quot;number_of_shards&quot;:5, &quot;number_of_replicas&quot;:0, &quot;routing.allocation.include.group&quot;: &quot;simple&quot;}}}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 group</p><ul><li>group=simple</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> infra get pods es-data-simple-0  --show-labels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以使用以下命令行来查看所有索引：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">&#39;http://localhost:9200/_cat/indices?v&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看集群状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">&#39;http://localhost:9200/_cat/health&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="高级步骤-自动缩放" tabindex="-1"><a class="header-anchor" href="#高级步骤-自动缩放" aria-hidden="true">#</a> 高级步骤：自动缩放</h2>`,48),d={href:"https://github.com/zalando-incubator/es-operator/tree/master#example-1",target:"_blank",rel:"noopener noreferrer"},u=a("h2",{id:"高级步骤-生产就绪功能",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#高级步骤-生产就绪功能","aria-hidden":"true"},"#"),s(" 高级步骤：生产就绪功能")],-1),b=a("p",null,"如果您了解自动缩放的工作原理，则可以处理生产就绪的后续步骤。",-1),v=a("p",null,"来自 Elasticsearch 的官方 Helm Charts 提供了一些有趣的功能，你可能还想在投入生产之前集成：",-1),m=a("ul",null,[a("li",null,"不同的持久性选项"),a("li",null,"基于主机的反亲和性"),a("li",null,"改进了基于脚本的准备情况检查")],-1),h=a("p",null,"我们还没有在他们的掌舵中看到它，但如果您希望集群具有高可用性，请使用分配感知功能来确保数据在不同位置、区域或机架之间传播。",-1),k=a("p",null,"高级步骤：不同的 Elasticsearch 集群 当然，您可以决定 ES 操作员是应该管理一个大集群，还是要运行多个较小的集群。这是完全可能的。只需确保它们具有不同的集群名称，并使用不同的主机名通过 Kubernetes 服务进行集群发现。",-1);function g(q,_){const e=l("ExternalLinkIcon");return i(),t("div",null,[p,a("p",null,[s("在 ES 运算符如何处理数据节点方面积累了一些经验后，就可以开始尝试自动缩放功能。该 "),a("a",d,[s("README.md"),r(e)]),s(" 提供了一些不同扩展场景的示例。")]),u,b,v,m,h,k])}const x=n(o,[["render",g],["__file","zalando的es-operator的快速入门.html.vue"]]);export{x as default};
